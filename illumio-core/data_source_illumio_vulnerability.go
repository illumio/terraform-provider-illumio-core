// Copyright 2021 Illumio, Inc. All Rights Reserved.

package illumiocore

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func datasourceIllumioVulnerability() *schema.Resource {
	return &schema.Resource{
		ReadContext: datasourceIllumioVulnerabilityRead,

		SchemaVersion: 1,
		Description:   "Represents Illumio Vulnerability",

		Schema: map[string]*schema.Schema{
			"href": {
				Type:             schema.TypeString,
				Required:         true,
				ValidateDiagFunc: isVulnerabilityHref,
				Description:      "URI of vulnerability",
			},
			"score": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "The normalized score of the vulnerability within the range of 0 to 100. CVSS Score can be used here with a 10x multiplier",
			},
			"cve_ids": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "The cve_ids for the vulnerability",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"description": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "An arbitrary field to store some details of the vulnerability class",
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The title/name of the vulnerability",
			},
			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The time (rfc3339 timestamp) at which this report was created",
			},
			"updated_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The time (rfc3339 timestamp) at which this report was last updated",
			},
			"created_by": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: "The Href of the user who created this report",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"updated_by": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: "The Href of the user who last updated this report",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

func datasourceIllumioVulnerabilityRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pConfig, _ := m.(Config)
	illumioClient := pConfig.IllumioClient

	// orgID := pConfig.OrgID
	href := d.Get("href").(string)

	_, data, err := illumioClient.Get(href, nil)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(href)

	for _, k := range []string{
		"href",
		"score",
		"cve_ids",
		"description",
		"name",
		"created_at",
		"updated_at",
		"created_by",
		"updated_by",
	} {
		if data.Exists(k) {
			d.Set(k, data.S(k).Data())
		} else {
			d.Set(k, nil)
		}
	}

	return diags
}
