// Copyright 2021 Illumio, Inc. All Rights Reserved.

package illumiocore

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func datasourceIllumioVulnerabilityReports() *schema.Resource {
	return &schema.Resource{
		ReadContext:   dataSourceIllumioVulnerabilityReportsRead,
		SchemaVersion: 1,
		Description:   "Represents Illumio Vulnerability Reports",

		Schema: map[string]*schema.Schema{
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of Vulnerability Report",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"href": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "URI of Vulnerability Report",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "User-generated name of the vulnerability report",
						},
						"report_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "A string representing the type of the report",
						},
						"num_vulnerabilities": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of vulnerabilities that belong to this report",
						},
						"authoritative": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Boolean value specifies whether a report is authoritative (or) not",
						},
						"scanned_ips": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "The IPs on which the scan was performed",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The time (rfc3339 timestamp) at which this report was created",
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The time (rfc3339 timestamp) at which this report was last updated",
						},
						"created_by": {
							Type:        schema.TypeMap,
							Computed:    true,
							Description: "The Href of the user who created this report",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"updated_by": {
							Type:        schema.TypeMap,
							Computed:    true,
							Description: "The Href of the user who last updated this report",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"exported_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The timestamp (rfc3339 timestamp) at which this report was exported",
						},
					},
				},
			},
			"max_results": {
				Type:             schema.TypeString,
				Optional:         true,
				ValidateDiagFunc: isStringGreaterThanZero(),
				Description:      "Maximum number of vulnerability_reports to return. The integer should be a non-zero positive integer",
			},
		},
	}
}

func dataSourceIllumioVulnerabilityReportsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diagnostics diag.Diagnostics
	pConfig, _ := m.(Config)
	illumioClient := pConfig.IllumioClient

	orgID := illumioClient.OrgID

	paramKeys := []string{
		"max_results",
	}
	params := resourceDataToMap(d, paramKeys)
	_, data, err := illumioClient.Get(fmt.Sprintf("/orgs/%d/vulnerability_reports", orgID), &params)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(fmt.Sprintf("%v", hashcode(paramsString(params))))

	dataMap := []map[string]interface{}{}
	keys := []string{
		"href",
		"name",
		"report_type",
		"num_vulnerabilities",
		"authoritative",
		"scanned_ips",
		"created_at",
		"updated_at",
		"created_by",
		"updated_by",
		"exported_at",
	}
	for _, child := range data.Children() {
		m := extractMap(child, keys)
		dataMap = append(dataMap, m)
	}
	d.Set("items", dataMap)

	return diagnostics
}
