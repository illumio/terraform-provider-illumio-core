// Copyright 2021 Illumio, Inc. All Rights Reserved.

package illumiocore

import (
	"context"
	"fmt"

	"github.com/Jeffail/gabs/v2"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/illumio/terraform-provider-illumio-core/models"
)

var (
	detectedVulStateValidValues = []string{"active", "fixed"}
)

func resourceIllumioVulnerabilityReport() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceIllumioVulnerabilityReportCreate,
		ReadContext:   resourceIllumioVulnerabilityReportRead,
		UpdateContext: resourceIllumioVulnerabilityReportUpdate,
		DeleteContext: resourceIllumioVulnerabilityReportDelete,

		SchemaVersion: version,
		Description:   "Manages Illumio Vulnerability Report",

		Schema: map[string]*schema.Schema{
			"reference_id": {
				Type:             schema.TypeString,
				Required:         true,
				Description:      "Vulnerability Report ID",
				ValidateDiagFunc: validation.ToDiagFunc(validation.StringIsNotEmpty),
			},
			"href": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The resource(URI) representation of the vulnerability report",
			},
			"name": {
				Type:             schema.TypeString,
				Required:         true,
				Description:      "User-generated name of the vulnerability report. The name should be up to 255 characters",
				ValidateDiagFunc: checkStringZerotoTwoHundredAndFiftyFive,
			},
			"report_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "A string representing the type of the report",
			},
			"num_vulnerabilities": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "Number of vulnerabilities that belong to this report",
			},
			"authoritative": {
				Type:        schema.TypeBool,
				Optional:    true,
				Default:     false,
				Description: "Boolean value specifies whether a report is authoritative (or) not. Default value: false",
			},
			"scanned_ips": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "The IPs on which the scan was performed. IPv6 and IPv4. Max Items allowed: 100000",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The time (rfc3339 timestamp) at which this report was created",
			},
			"updated_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The time (rfc3339 timestamp) at which this report was last updated",
			},
			"created_by": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: "The Href of the user who created this report",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"updated_by": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: "The Href of the user who last updated this report",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"detected_vulnerabilities": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "detected_vulnerabilities for Vulnerability report. Max Items allowed: 100000",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ip_address": {
							Type:             schema.TypeString,
							Required:         true,
							ValidateDiagFunc: validation.ToDiagFunc(validation.IsIPAddress),
							Description:      "The IP address of the host where the vulnerability is found. IPv4 or IPv6",
						},
						"port": {
							Type:             schema.TypeString,
							Optional:         true,
							ValidateDiagFunc: isStringANumber(),
							Description:      "The port that is associated with the vulnerability",
						},
						"proto": {
							Type:             schema.TypeString,
							Optional:         true,
							ValidateDiagFunc: isStringANumber(),
							Description:      "The protocol that is associated with the vulnerability",
						},
						"workload": {
							Type:        schema.TypeList,
							MaxItems:    1,
							Required:    true,
							Description: "The Href of the workload to which this vulnerability belongs",
							Elem:        hrefSchemaRequired("Workload", isWorkloadHref),
						},
						"vulnerability": {
							Type:        schema.TypeList,
							MaxItems:    1,
							Required:    true,
							Description: "The Href of the vulnerability class to which this vulnerability belongs",
							Elem:        hrefSchemaRequired("Vulnerability", isVulnerabilityHref),
						},
						"external_data_reference": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "external data reference json string for vulnerability",
						},
						"state": {
							Type:             schema.TypeString,
							Optional:         true,
							Description:      `Detected vulnerability state. Allowed values are "active", and "fixed". Default value: "active"`,
							Default:          "active",
							ValidateDiagFunc: validation.ToDiagFunc(validation.StringInSlice(detectedVulStateValidValues, false)),
						},
					},
				},
			},
			"exported_at": {
				Type:             schema.TypeString,
				Optional:         true,
				ValidateDiagFunc: validation.ToDiagFunc(validation.IsRFC3339Time),
				Description:      "The timestamp (rfc3339 timestamp) at which this report was exported",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceIllumioVulnerabilityReportCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	pConfig, _ := m.(Config)
	illumioClient := pConfig.IllumioClient

	orgID := illumioClient.OrgID
	refID := d.Get("reference_id").(string)

	id := fmt.Sprintf("/orgs/%v/vulnerability_reports/%v", orgID, refID)

	vulReport := expandIllumioVulReport(d)

	_, err := illumioClient.Update(id, vulReport)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(id)

	return resourceIllumioVulnerabilityReportRead(ctx, d, m)
}

func resourceIllumioVulnerabilityReportRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pConfig, _ := m.(Config)
	illumioClient := pConfig.IllumioClient
	href := d.Id()

	_, data, err := illumioClient.Get(href, nil)
	if err != nil {
		return diag.FromErr(err)
	}

	setIllumioVulReportState(data, d)

	d.Set("detected_vulnerabilities", nil)

	return diags
}

func setIllumioVulReportState(data *gabs.Container, d *schema.ResourceData) {

	vulRepKeys := []string{
		"href",
		"name",
		"report_type",
		"num_vulnerabilities",
		"authoritative",
		"scanned_ips",
		"created_at",
		"updated_at",
		"created_by",
		"updated_by",
		"exported_at",
	}

	for _, k := range vulRepKeys {
		if data.Exists(k) {
			d.Set(k, data.S(k).Data())
		} else {
			d.Set(k, nil)
		}
	}
}

func expandIllumioVulReport(d *schema.ResourceData) *models.VulnerabilityReport {
	return &models.VulnerabilityReport{
		Name:                    d.Get("name").(string),
		ReportType:              d.Get("report_type").(string),
		Authoritative:           d.Get("authoritative").(bool),
		ScannedIps:              getStringList(d.Get("scanned_ips").(*schema.Set).List()),
		ExportedAt:              d.Get("exported_at").(string),
		DetectedVulnerabilities: expandIllumioVulReportDetectedVul(d),
	}
}

func expandIllumioVulReportDetectedVul(d *schema.ResourceData) []*models.VulReportDetectedVulnerability {
	detectedVuls := d.Get("detected_vulnerabilities").(*schema.Set).List()
	dvs := []*models.VulReportDetectedVulnerability{}
	for _, detectedVul := range detectedVuls {
		d := detectedVul.(map[string]interface{})

		dvs = append(dvs, &models.VulReportDetectedVulnerability{
			IPAddress:             d["ip_address"].(string),
			Port:                  d["port"].(string),
			Proto:                 d["proto"].(string),
			Workload:              getHrefObj(d["workload"]),
			Vulnerability:         getHrefObj(d["vulnerability"]),
			ExternalDataReference: d["external_data_reference"].(string),
			State:                 d["state"].(string),
		})
	}

	return dvs
}

func resourceIllumioVulnerabilityReportUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	pConfig, _ := m.(Config)
	illumioClient := pConfig.IllumioClient

	if isUpdatedToEmptyString(d.GetChange("exported_at")) {
		return diag.Diagnostics{
			diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "[illumio-core_vulnerability_report] Update not allowed, exported_at attribute cannot be updated to null",
				Detail:   "Once set, the value of exported_at attribute cannot be set to null",
			},
		}
	}

	vulReport := expandIllumioVulReport(d)

	_, err := illumioClient.Update(d.Id(), vulReport)
	if err != nil {
		return diag.FromErr(err)
	}

	return resourceIllumioVulnerabilityReportRead(ctx, d, m)
}

func resourceIllumioVulnerabilityReportDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pConfig, _ := m.(Config)
	illumioClient := pConfig.IllumioClient

	_, err := illumioClient.Delete(d.Id())
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId("")

	return diags
}
